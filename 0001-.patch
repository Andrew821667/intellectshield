From e7c3b8514c6a525ab93bf01be89d6a1794b553be Mon Sep 17 00:00:00 2001
From: Andrew821667 <a.popov.gv@gmail.com>
Date: Thu, 20 Mar 2025 21:07:49 +0000
Subject: [PATCH] =?UTF-8?q?=D0=A0=D0=B5=D0=BE=D1=80=D0=B3=D0=B0=D0=BD?=
 =?UTF-8?q?=D0=B8=D0=B7=D0=B0=D1=86=D0=B8=D1=8F=20=D1=81=D1=82=D1=80=D1=83?=
 =?UTF-8?q?=D0=BA=D1=82=D1=83=D1=80=D1=8B=20=D0=B4=D0=B5=D1=82=D0=B5=D0=BA?=
 =?UTF-8?q?=D1=82=D0=BE=D1=80=D0=BE=D0=B2:=20=D0=B2=D1=81=D0=B5=20=D0=B4?=
 =?UTF-8?q?=D0=B5=D1=82=D0=B5=D0=BA=D1=82=D0=BE=D1=80=D1=8B=20=D0=BF=D0=B5?=
 =?UTF-8?q?=D1=80=D0=B5=D0=BC=D0=B5=D1=89=D0=B5=D0=BD=D1=8B=20=D0=B2=20?=
 =?UTF-8?q?=D0=BE=D0=B4=D0=BD=D1=83=20=D0=BF=D0=B0=D0=BF=D0=BA=D1=83,=20?=
 =?UTF-8?q?=D0=BE=D0=B1=D0=BD=D0=BE=D0=B2=D0=BB=D0=B5=D0=BD=D1=8B=20=D0=B8?=
 =?UTF-8?q?=D0=BC=D0=BF=D0=BE=D1=80=D1=82=D1=8B?=
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

---
 __pycache__/__init__.cpython-311.pyc          | Bin 0 -> 859 bytes
 detectors/__init__.py                         |   8 +
 .../__pycache__/__init__.cpython-311.pyc      | Bin 155 -> 829 bytes
 detectors/__pycache__/base.cpython-311.pyc    | Bin 6974 -> 7455 bytes
 detectors/__pycache__/dos.cpython-311.pyc     | Bin 9225 -> 9225 bytes
 ...ced_adaptive_detector_base.cpython-311.pyc | Bin 17245 -> 17245 bytes
 ...daptive_detector_detection.cpython-311.pyc | Bin 23992 -> 23992 bytes
 ...adaptive_detector_features.cpython-311.pyc | Bin 14447 -> 14447 bytes
 ...adaptive_detector_profiles.cpython-311.pyc | Bin 17437 -> 17437 bytes
 .../__pycache__/ensemble.cpython-311.pyc      | Bin 30426 -> 30426 bytes
 .../isolation_forest.cpython-311.pyc          | Bin 7752 -> 7752 bytes
 detectors/__pycache__/lof.cpython-311.pyc     | Bin 7419 -> 7419 bytes
 .../__pycache__/sequence.cpython-311.pyc      | Bin 10019 -> 10019 bytes
 detectors/base.py                             |  63 ++++----
 .../enhanced_adaptive_detector_base.py        |   0
 .../enhanced_adaptive_detector_detection.py   |   0
 .../enhanced_adaptive_detector_features.py    |   0
 .../enhanced_adaptive_detector_profiles.py    |   0
 intellectshield/detectors/__init__.py         |   1 -
 .../__pycache__/__init__.cpython-311.pyc      | Bin 155 -> 0 bytes
 .../__pycache__/base.cpython-311.pyc          | Bin 6674 -> 0 bytes
 intellectshield/detectors/base.py             | 152 ------------------
 22 files changed, 44 insertions(+), 180 deletions(-)
 create mode 100644 __pycache__/__init__.cpython-311.pyc
 rename {intellectshield/detectors => detectors}/__pycache__/enhanced_adaptive_detector_base.cpython-311.pyc (99%)
 rename {intellectshield/detectors => detectors}/__pycache__/enhanced_adaptive_detector_detection.cpython-311.pyc (99%)
 rename {intellectshield/detectors => detectors}/__pycache__/enhanced_adaptive_detector_features.cpython-311.pyc (99%)
 rename {intellectshield/detectors => detectors}/__pycache__/enhanced_adaptive_detector_profiles.cpython-311.pyc (99%)
 rename {intellectshield/detectors => detectors}/enhanced_adaptive_detector_base.py (100%)
 rename {intellectshield/detectors => detectors}/enhanced_adaptive_detector_detection.py (100%)
 rename {intellectshield/detectors => detectors}/enhanced_adaptive_detector_features.py (100%)
 rename {intellectshield/detectors => detectors}/enhanced_adaptive_detector_profiles.py (100%)
 delete mode 100644 intellectshield/detectors/__init__.py
 delete mode 100644 intellectshield/detectors/__pycache__/__init__.cpython-311.pyc
 delete mode 100644 intellectshield/detectors/__pycache__/base.cpython-311.pyc
 delete mode 100644 intellectshield/detectors/base.py

diff --git a/__pycache__/__init__.cpython-311.pyc b/__pycache__/__init__.cpython-311.pyc
new file mode 100644
index 0000000000000000000000000000000000000000..b1bb3f9681522cd0f15f2dfb301c7e6fef85a2a6
GIT binary patch
literal 859
zcmb_bO>5Lp6n&YgwWJJ+3%9;S7Y@`+-4_=w283b}ce8m6Nw9%9k$eccN~em#h%Oa(
zuB6aHX6m$Kr-^^zzMT|z{(*t+y7JuD7FVJR6L`7Fz4zR6-g)`lXxIYRe*WXpPEClP
z{Bm(w=fTM}1n-3>I>NI$mRIZ4y!u1YoXb|xV$%mIb)UvG#XY7&#M?B{eR)gLCj^@&
zc|?VziiT8Dp>w@O`=~9EekZ9wP!TEsFrlxKMpAFm*z}D!BXwWr=zD?mA&rrh3{2mU
zoa#4pfal1-On`bM8B4!LacPkEs4}zlmVR|H)v;~b#e@n(fm1LpLV#BE1z`??ECNvY
z0KT9mk(n~#|D?nIn+_HYaTpEar5@;)%!fCINka3#C|$;WLfurq1xNw<_mU{=ra{z`
z?I`w>blF~u+-@k>vos9+Shl-v8pZPF+IqW*W_IVynFHRb3R}cJoB6;q&cg#(cy2We
z#8#mVl?C_?P5np@;M{Nedf?d4FReJYot5k^4j6reAU*>npbL2>-K;}43EbIxqxla9
z?tZg=d|4?ka+Nw>RO+c8Cs2tOTd8iAZbY$C+v0?e_32W}je4oyOIraRVd%SQvJv>9
z*HS9z1*uZblV_(3tB)fu3;jFs0-E@TNN!-6)h)}K)#k0anc(HBxN<#T{N8ww+kD6K
GsQCp20pw}`

literal 0
HcmV?d00001

diff --git a/detectors/__init__.py b/detectors/__init__.py
index e69de29..7096f58 100644
--- a/detectors/__init__.py
+++ b/detectors/__init__.py
@@ -0,0 +1,8 @@
+# Инициализационный файл для модуля detectors
+from intellectshield.detectors.base import BaseAnomalyDetector
+from intellectshield.detectors.isolation_forest import IsolationForestDetector
+from intellectshield.detectors.lof import LOFDetector
+from intellectshield.detectors.ensemble import EnsembleAnomalyDetector
+from intellectshield.detectors.dos import DoSDetector
+from intellectshield.detectors.sequence import SequenceAnomalyDetector
+from intellectshield.detectors.enhanced_adaptive_detector_base import EnhancedAdaptiveDetector
diff --git a/detectors/__pycache__/__init__.cpython-311.pyc b/detectors/__pycache__/__init__.cpython-311.pyc
index eff1b91ff57e17f4206dcfd9ed8218d7a51fb950..4a8bd2d8c4fe08ac58a13f4ba2b46716be2884af 100644
GIT binary patch
literal 829
zcma)2F-yZh6uxVkCTXmL3U$%Jtq#c`4uTXaZ9$Mabjx5!o2w1n<?7v4=<1}uz@H%g
zn~bG62u^N7w@zMS0*$oR$IIoryYGAV-uF_el!1)Lhqv340stTJCJVVwV(!S_Gw^{A
zF(A-^FvbO3Ac~_TSiwc2I%<N8xI{EZOR$P{VmL;EOSnu-$4sz>w@AgQNUV23&G?L;
zslnOqg~w4Nq{PFMCK9MGD3iz4OHQ#T0vfg{LtHFfnOE2CrERqpazuJ~MG><}yUWZj
zx*Magzk<2n3WuJ&@f*H362U#nWS!df>@Wxg!dSM(hXKOA<)?jet0$XhikxJ2yq*+f
zqqu`)7FLV}2kQlx4wxEqj@ENfIyEb8DCSenv<=00Y7En3;@MxX{@CPtsZVa^g_~Gm
zNc}6A%M~mvyHBNYp|F3|voj61T{j2=;kwpnve3^7^~V_1*`Aa``SB;Yd?^sZcTkV=
cIR%|4pHpxe<#P(!Q9l32xrxAvWIM8(Zy+5I*#H0l

delta 100
zcmdnXHk;9MIWI340}$l!TuBGfk3j?sFhUuh*?^4c3@Hr344RC7D;bKI7#JoeGC3-;
Z0>wd!iur-W2WCb_#t#fIqKFwN1_12g4hR4M

diff --git a/detectors/__pycache__/base.cpython-311.pyc b/detectors/__pycache__/base.cpython-311.pyc
index 9f187d2fd61d3d96f0c3d0a97257fdf7873e446d..2b50b0217143b34d929800f7058fe5cf732048ee 100644
GIT binary patch
delta 1639
zcmbtUZA@EL7(S;hTU+RNOK%w)XX3|-d`!Vj%7n~pXkxq>Xi!-qRPJSK>6f>+`orod
zXw*nz;+a{ZY(rzVAI4Zd>KGfv_{$&uIG5aHgh=$aKeQz14-ymK+tN<l_~l8@)Au~*
zdEcIM^1RI-yBe@ww^+;w#`(<8=Xl?&)oaylWBQ1-9gotp*4OB(`j)3q*r-Xgkw#%t
zDMBb*Ow?ANBf*f?0ajf$T+<=+HO$g@8`Cyhd-cC^Xw){=sh1nd3aDc*$7y{U@6N|a
zZY=L2B<!cd?pjkCzkvM4R2`;A?XC26yZeHf?2I!(DHs)HQA!3XT+7{2;YLFdF%gu{
zlK@G|QZtDs<WM{oj8p_#J$6-@R3?-u!WP&q<zu2`SYCNg8E09x%yKXnfn>K?z7GUB
zc8e{x680&mAR>G`CN>k0WY`MJL;e)Ip-i$I6wDNBDHFvy3oNUQL%ghf#BLI{Qu;~y
zmi>y!m<+xl3PVAeHahqNZg>aD1F&ug$3rp6p{<W;aGXv#+M5j$r)?U`S6es9p{SUY
zgVDsgIT{zl$dC{kk&^~c(Z3vl2Y!QK92K0X#y%Bb)dx46_3U6=aVAt}g4HB`t#;8D
zoezy|czqY&yp;YVJ#*?SJ}WQ0qaNp3$B6dn8{7#xMij50dW8?3Ef`U4-NnH*fUz~M
ze%i7|9#qK_YjuaFTh+S9HaMbk{ySXDD%YZLZ7SDxhwEJBIu))<<+|t}PM+3VP53kV
zjO%6mFr9Hd$q9zbRo5_>3TA0wl-3DV^mmufw$E24!J0$+=ux-NvcF8Fbu&gfYjZaX
z#t_==D-c&aDOVzJm<b%#SY<A!nuThirj$yT+=mU8R0pQNxSMFbhx@;-+rw*1_xfxZ
z3<TZ)r<IMS<-W4xc|t0c`b9Y<#qQ(%iXtgSMk|Y=$uEHo=fQ%L?7O0=!HDz=kIP<B
zNvGgJQzvPc=kO>Pb&;*?ItpQPM0ppA+yvj}$dObR$o&LbWkPEN<$c&HyIvy+@Hw^w
zKK~HD=UJYxB@kwzEix=ij%;H;&3k$-G(j0QUB0r`g|pBiAiVc|vH>EU)(+XB<;+2c
z=Gg5$8&>PxMRtSD!Lc%0=drxsEIkLQ>xM`?D3qFt^0l06U4KrLB^PY@^~Ls*cq-TS
z8g1akarEaQ`a^BY(;>_ThFLJG4#WxwyF$2xYkdDtF_jk!`nz0dXA@yd7;hC37)zKw
z>TR-Jw|;45Z708fTp_(G>7{4A4Lt>fY-e<fftBv1?jM_A^%8zww~5dRUbj`mlAwgZ
zoBA{!5EwxEt#=p?P&@aHr=iMSK>vmLRnCFy2H|?r0S&Zf+BTkmKZ{gE?3N<)fBST}
Tr(cI5_x`w9<hS<NEmr*pvwJK#

delta 1206
zcmZ`&Uu;uV7(eIsww!kD?bh3_J!6GC-I$wL7fG1A*12V@Dkk#*9~Kf|O<IMrN^@zW
z#x71UaT<~l4(bC;7h(`%Os>wkAzEK}<l!806BZIkeDKMTbOAK_<ach}m^#0l^E>B!
z|L^yG_cOD$Tl*pu3LqdW=)CrR;%hCgDT>0nwOx3W6~oW4kG1ZhDk^xTj--OGaUwM3
zsd~<#oLW@?y>sdmE^BKt&?9U2c|XH`eLDg#ZY0UC;)@DGU&3zCl*+opyP7scVfpY;
z>}4Vx_js!+`!&3Mn|cn-DHk!=!EO*nRdpZgA(efIJ=UB`e#;ld3BJg`2ds%{ZX5g?
zL%hdreuZCUX3M7mfB8r;f4rP6me|iNWB%RX$La@QsYojui#*xyvl8&UMP5BJnSVW7
z%v+;UWzRaVlr0~=6(}Cd<tGp2vgPb?SrEfumm_B9?{J+)b%KJ;r%c|Iyd7!h$zvi?
zav~)jEY*D|7-e3)YhZ;Y&u?>R-^|{XwoV=&fHnVC;{=>};eiiDThI1?l0K83S3lQm
zBJ=@AADAI*TsM-m!=b%5Y3c?|3EBs4Zc_6GH3dyOG|fKJ#{x1Z5A1uV*<F1ccd<<L
z>ApGjKgCmWDh0I$RnejK22_=tm)TJo_WeV?h1H@ozTVohf6W%59ATZYN4NOF5>vzq
zv36$0n$=vB`{+=EvPZMA-lsO{(K26J?-I9D0po9S%U*ejU2pAphc7`F7sRwU$-jf!
zBL9KgV%C78#=#}ODoz>D^=1AObiL9CiS0D_kGv+Cav)BM4?uXukjfip<e`xj1|zFk
zLPUZNQ0W5T=Xs5l;*Si)<l};ju^}#BHjT<wDLD%noq*`#UC3z(0@;wjvY0gucZhoY
zXA(V{>$b<^PMP&GOD8hqH!z+?4+8AN#1rWQm`@b=(KnolH|q%N2XF&dMxMVm=#1>I
zdmi#u5e^;1_gw_7&_VV`qIW-k{8`5soKYQ;{Dp+LHe??LfF;PVLxwpSzU{K-3wFD+
zV{kLs=%u~(+s@7ru8qPHB;$|_CmD8{PT*JAD*Y<f>W$XXzhPmatp&G@!`E1{9+n)P
jKS>(?mC9s(&?+q4*{a~@UQ{sHZjP%i|Nj3-U9W!uK)ZW6

diff --git a/detectors/__pycache__/dos.cpython-311.pyc b/detectors/__pycache__/dos.cpython-311.pyc
index 5fdbc03664ea663ef58fcdbaf870a04eca7728a5..ee5cb565095e72f681e7d0bcd9940bb3b2c0bfd3 100644
GIT binary patch
delta 20
acmeD5==9)T&dbZi00i3_?rh}#rwjl*BnD^z

delta 20
acmeD5==9)T&dbZi00a|xu59G~rwjl%K?TPE

diff --git a/intellectshield/detectors/__pycache__/enhanced_adaptive_detector_base.cpython-311.pyc b/detectors/__pycache__/enhanced_adaptive_detector_base.cpython-311.pyc
similarity index 99%
rename from intellectshield/detectors/__pycache__/enhanced_adaptive_detector_base.cpython-311.pyc
rename to detectors/__pycache__/enhanced_adaptive_detector_base.cpython-311.pyc
index 4ddbe16d496b819c70750a299d1441715f48fbd8..e5c222974d676f9c79e863b11431fb828ec8b7f1 100644
GIT binary patch
delta 21
bcmccH#(1}lk!v|GFBbz4JZRj=73>TEOgsiq

delta 21
bcmccH#(1}lk!v|GFBbz4sA_EF3U&qnMjZt_

diff --git a/intellectshield/detectors/__pycache__/enhanced_adaptive_detector_detection.cpython-311.pyc b/detectors/__pycache__/enhanced_adaptive_detector_detection.cpython-311.pyc
similarity index 99%
rename from intellectshield/detectors/__pycache__/enhanced_adaptive_detector_detection.cpython-311.pyc
rename to detectors/__pycache__/enhanced_adaptive_detector_detection.cpython-311.pyc
index 90b39794b0d6429c258af00ec24ba6057fbc7812..9848de96425edb4a1f4bb102a591787a07218809 100644
GIT binary patch
delta 21
bcmdn7n{mf(My}<&yj%=G@St%c*Sc5$PZ9>@

delta 21
bcmdn7n{mf(My}<&yj%=G;IF=sYh5e=N$Lgq

diff --git a/intellectshield/detectors/__pycache__/enhanced_adaptive_detector_features.cpython-311.pyc b/detectors/__pycache__/enhanced_adaptive_detector_features.cpython-311.pyc
similarity index 99%
rename from intellectshield/detectors/__pycache__/enhanced_adaptive_detector_features.cpython-311.pyc
rename to detectors/__pycache__/enhanced_adaptive_detector_features.cpython-311.pyc
index 44e4666df3d29a20c85d22372f207f77aede85dc..de98d4dee294290e8869f17e73956846cf9d7f0f 100644
GIT binary patch
delta 19
ZcmaD~@V<a+IWI340}woD+{l$`0RTs%22B6}

delta 19
ZcmaD~@V<a+IWI340}#wr-^i6}0RTi#1+V}B

diff --git a/intellectshield/detectors/__pycache__/enhanced_adaptive_detector_profiles.cpython-311.pyc b/detectors/__pycache__/enhanced_adaptive_detector_profiles.cpython-311.pyc
similarity index 99%
rename from intellectshield/detectors/__pycache__/enhanced_adaptive_detector_profiles.cpython-311.pyc
rename to detectors/__pycache__/enhanced_adaptive_detector_profiles.cpython-311.pyc
index de30dbbb77530a19a903e571a081f99129d280b2..6b6b7efd7b995bea6e4aa3cf5b15e0dec498b9d0 100644
GIT binary patch
delta 21
bcmbQ+!8o^rk!v|GFBbz4JZRj=CF}wKLPrIa

delta 21
bcmbQ+!8o^rk!v|GFBbz4Tvy-7CF}wKKu-lS

diff --git a/detectors/__pycache__/ensemble.cpython-311.pyc b/detectors/__pycache__/ensemble.cpython-311.pyc
index fa28ca145d858067412701458743eb3ae570f0d6..92ca908f0638e7e97476edc9fa8c07fc3f04bb19 100644
GIT binary patch
delta 22
ccmcchmhskGM(*Xjyj%=Gu&v?FM(*=v0A$YydH?_b

delta 22
ccmcchmhskGM(*Xjyj%=GFo);LM(*=v0AV=?<NyEw

diff --git a/detectors/__pycache__/isolation_forest.cpython-311.pyc b/detectors/__pycache__/isolation_forest.cpython-311.pyc
index 219f2fe1c19fcdea92690bb2ca6bcea7b7132a59..62d66abe12e91845283b42e53133fae488ef5e84 100644
GIT binary patch
delta 20
acmX?MbHavuIWI340}yO$xU-SlRt^9{M+OK0

delta 20
acmX?MbHavuIWI340}wC?UD?QOD+d5Np9J0j

diff --git a/detectors/__pycache__/lof.cpython-311.pyc b/detectors/__pycache__/lof.cpython-311.pyc
index b300c3c8bd3b276de47f5f8a986f9a4a20943a5a..238297160b383ebc6859d3901a08d4a605b4763f 100644
GIT binary patch
delta 20
acmexu`P-6vIWI340}yO$xU-S_gA4#l(FYj-

delta 20
acmexu`P-6vIWI340}wRxT-nI|K?VRuj0S1|

diff --git a/detectors/__pycache__/sequence.cpython-311.pyc b/detectors/__pycache__/sequence.cpython-311.pyc
index 041964296b7cfa47c371f24de01c6b287f5f362c..c5a7fbd0a8b55a0b11b94b153b2dd19a0c3ed2d8 100644
GIT binary patch
delta 20
acmZ4Nx7d$+IWI340}yO$xU-R4LLC4<5Cz5n

delta 20
acmZ4Nx7d$+IWI340}yobT-nGip$-5#^#vUO

diff --git a/detectors/base.py b/detectors/base.py
index cec2011..caa5342 100644
--- a/detectors/base.py
+++ b/detectors/base.py
@@ -101,58 +101,67 @@ class BaseAnomalyDetector:
         
         return evaluation
     
-    def save_model(self, filename=None):
+    def save_model(self, filepath=None):
         """
-        Сохранение модели детектора в файл.
+        Сохранение модели в файл.
+        
+        Parameters:
+        -----------
+        filepath : str, optional
+            Путь для сохранения модели. Если None, используется стандартный путь.
         """
         if self.model is None:
             raise ValueError("Модель не обучена и не может быть сохранена.")
-        
-        # Если имя файла не указано, генерируем его из типа модели и времени
-        if filename is None:
+            
+        if filepath is None:
             timestamp = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
-            model_type = self.__class__.__name__
-            filename = f"{model_type}_{timestamp}.joblib"
-        
-        # Полный путь к файлу
-        filepath = os.path.join(self.model_dir, filename)
+            filepath = os.path.join(self.model_dir, f"{self.__class__.__name__}_{timestamp}.joblib")
         
-        # Создаем словарь с моделью и метаданными
-        model_data = {
+        # Создаем словарь с компонентами модели
+        model_dict = {
             'model': self.model,
             'scaler': self.scaler,
             'features': self.features,
             'training_summary': self.training_summary,
             'model_type': self.__class__.__name__,
-            'timestamp': datetime.datetime.now().isoformat()
+            'saved_at': datetime.datetime.now().isoformat()
         }
         
         # Сохраняем в файл
-        joblib.dump(model_data, filepath)
+        joblib.dump(model_dict, filepath)
         print(f"Модель сохранена в {filepath}")
         
         return filepath
     
     def load_model(self, filepath):
         """
-        Загрузка модели детектора из файла.
+        Загрузка модели из файла.
+        
+        Parameters:
+        -----------
+        filepath : str
+            Путь к сохраненной модели
+            
+        Returns:
+        --------
+        self
+            Загруженный детектор
         """
-        # Загружаем данные из файла
-        model_data = joblib.load(filepath)
+        # Загружаем словарь с компонентами модели
+        model_dict = joblib.load(filepath)
         
-        # Проверяем, что тип модели совпадает
-        if model_data['model_type'] != self.__class__.__name__:
-            print(f"Предупреждение: загружаемая модель типа {model_data['model_type']}, "
-                  f"но текущий детектор типа {self.__class__.__name__}")
+        # Проверяем совместимость
+        if model_dict['model_type'] != self.__class__.__name__:
+            print(f"Предупреждение: тип модели в файле ({model_dict['model_type']}) "
+                  f"отличается от текущего класса ({self.__class__.__name__})")
         
         # Загружаем компоненты
-        self.model = model_data['model']
-        self.scaler = model_data['scaler']
-        self.features = model_data['features']
-        self.training_summary = model_data['training_summary']
+        self.model = model_dict['model']
+        self.scaler = model_dict['scaler']
+        self.features = model_dict['features']
+        self.training_summary = model_dict.get('training_summary', {})
         
         print(f"Модель загружена из {filepath}")
-        print(f"Тип модели: {model_data['model_type']}")
-        print(f"Дата создания: {model_data['timestamp']}")
+        print(f"Модель была сохранена: {model_dict.get('saved_at', 'время сохранения неизвестно')}")
         
         return self
diff --git a/intellectshield/detectors/enhanced_adaptive_detector_base.py b/detectors/enhanced_adaptive_detector_base.py
similarity index 100%
rename from intellectshield/detectors/enhanced_adaptive_detector_base.py
rename to detectors/enhanced_adaptive_detector_base.py
diff --git a/intellectshield/detectors/enhanced_adaptive_detector_detection.py b/detectors/enhanced_adaptive_detector_detection.py
similarity index 100%
rename from intellectshield/detectors/enhanced_adaptive_detector_detection.py
rename to detectors/enhanced_adaptive_detector_detection.py
diff --git a/intellectshield/detectors/enhanced_adaptive_detector_features.py b/detectors/enhanced_adaptive_detector_features.py
similarity index 100%
rename from intellectshield/detectors/enhanced_adaptive_detector_features.py
rename to detectors/enhanced_adaptive_detector_features.py
diff --git a/intellectshield/detectors/enhanced_adaptive_detector_profiles.py b/detectors/enhanced_adaptive_detector_profiles.py
similarity index 100%
rename from intellectshield/detectors/enhanced_adaptive_detector_profiles.py
rename to detectors/enhanced_adaptive_detector_profiles.py
diff --git a/intellectshield/detectors/__init__.py b/intellectshield/detectors/__init__.py
deleted file mode 100644
index fb7a303..0000000
--- a/intellectshield/detectors/__init__.py
+++ /dev/null
@@ -1 +0,0 @@
-# Инициализационный файл для модуля detectors
diff --git a/intellectshield/detectors/__pycache__/__init__.cpython-311.pyc b/intellectshield/detectors/__pycache__/__init__.cpython-311.pyc
deleted file mode 100644
index bb53ee77d9380af33ed7ae426dcc6a78c248a761..0000000000000000000000000000000000000000
GIT binary patch
literal 0
HcmV?d00001

literal 155
zcmZ3^%ge<81jZV7(tUvRV-N=h7@>^MY(U0zh7^Wi22Do4l?+8pK>lZt<S#w_<ovvn
z)Vvb?Odyq$lbT#ooROKDlcJxJS_0(c7ZvNr$7kkcmc+;F6;%G>u*uC&Da}c>D`Ev|
X2U$?e4<tS?Gcq!MV1N-t%s?>!CUYa^

diff --git a/intellectshield/detectors/__pycache__/base.cpython-311.pyc b/intellectshield/detectors/__pycache__/base.cpython-311.pyc
deleted file mode 100644
index 1ae338d7600ec2a942aaed787da561920761efff..0000000000000000000000000000000000000000
GIT binary patch
literal 0
HcmV?d00001

literal 6674
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
aMXqIn{YsAC2s~EYnBHRLckWTkru|<^ZPXC}

diff --git a/intellectshield/detectors/base.py b/intellectshield/detectors/base.py
deleted file mode 100644
index bcf1f79..0000000
--- a/intellectshield/detectors/base.py
+++ /dev/null
@@ -1,152 +0,0 @@
-import numpy as np
-import pandas as pd
-from sklearn.metrics import confusion_matrix, classification_report
-import joblib
-import os
-import time
-import datetime
-
-class BaseAnomalyDetector:
-    """
-    Базовый класс для всех детекторов аномалий.
-    Определяет общий интерфейс для различных типов моделей.
-    """
-    
-    def __init__(self, model_dir="models"):
-        """
-        Инициализация базового детектора.
-        """
-        self.model = None
-        self.scaler = None
-        self.model_dir = model_dir
-        self.features = None
-        self.training_summary = {}
-        
-        # Создание директории для моделей, если не существует
-        if not os.path.exists(model_dir):
-            os.makedirs(model_dir)
-    
-    def preprocess_data(self, data, train=False):
-        """
-        Предобработка данных.
-        """
-        raise NotImplementedError("Метод должен быть переопределен в дочернем классе")
-    
-    def train(self, data, **kwargs):
-        """
-        Обучение модели.
-        """
-        raise NotImplementedError("Метод должен быть переопределен в дочернем классе")
-    
-    def predict(self, data):
-        """
-        Обнаружение аномалий в данных.
-        """
-        raise NotImplementedError("Метод должен быть переопределен в дочернем классе")
-    
-    def evaluate(self, data):
-        """
-        Оценка производительности модели.
-        """
-        if 'is_anomaly' not in data.columns:
-            raise ValueError("Для оценки необходимы данные с колонкой 'is_anomaly'")
-        
-        # Проверяем наличие колонки predicted_anomaly
-        if 'predicted_anomaly' not in data.columns:
-            # Если нет, выполняем предсказание
-            result_df = self.predict(data)
-        else:
-            # Используем существующие предсказания
-            result_df = data.copy()
-        
-        # Вычисляем метрики
-        cm = confusion_matrix(result_df['is_anomaly'], result_df['predicted_anomaly'])
-        tn, fp, fn, tp = cm.ravel()
-        
-        # Расчет метрик
-        accuracy = (tp + tn) / (tp + tn + fp + fn)
-        precision = tp / (tp + fp) if (tp + fp) > 0 else 0
-        recall = tp / (tp + fn) if (tp + fn) > 0 else 0
-        f1 = 2 * (precision * recall) / (precision + recall) if (precision + recall) > 0 else 0
-        
-        # Полный отчет
-        report = classification_report(
-            result_df['is_anomaly'], 
-            result_df['predicted_anomaly'],
-            output_dict=True
-        )
-        
-        # Результаты
-        evaluation = {
-            'accuracy': accuracy,
-            'precision': precision,
-            'recall': recall,
-            'f1_score': f1,
-            'confusion_matrix': cm,
-            'classification_report': report,
-            'detector_type': self.__class__.__name__
-        }
-        
-        return evaluation
-    
-    def save_model(self, filepath=None):
-        """
-        Сохранение модели в файл.
-        
-        Parameters:
-        -----------
-        filepath : str, optional
-            Путь для сохранения модели. Если None, используется стандартный путь.
-        """
-        if filepath is None:
-            timestamp = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
-            filepath = os.path.join(self.model_dir, f"{self.__class__.__name__}_{timestamp}.joblib")
-        
-        # Создаем словарь с компонентами модели
-        model_dict = {
-            'model': self.model,
-            'scaler': self.scaler,
-            'features': self.features,
-            'training_summary': self.training_summary,
-            'model_type': self.__class__.__name__,
-            'saved_at': datetime.datetime.now().isoformat()
-        }
-        
-        # Сохраняем в файл
-        joblib.dump(model_dict, filepath)
-        print(f"Модель сохранена в {filepath}")
-        
-        return filepath
-    
-    def load_model(self, filepath):
-        """
-        Загрузка модели из файла.
-        
-        Parameters:
-        -----------
-        filepath : str
-            Путь к сохраненной модели
-            
-        Returns:
-        --------
-        self
-            Загруженный детектор
-        """
-        # Загружаем словарь с компонентами модели
-        model_dict = joblib.load(filepath)
-        
-        # Проверяем совместимость
-        if model_dict['model_type'] != self.__class__.__name__:
-            print(f"Предупреждение: тип модели в файле ({model_dict['model_type']}) "
-                  f"отличается от текущего класса ({self.__class__.__name__})")
-        
-        # Загружаем компоненты
-        self.model = model_dict['model']
-        self.scaler = model_dict['scaler']
-        self.features = model_dict['features']
-        self.training_summary = model_dict['training_summary']
-        
-        print(f"Модель загружена из {filepath}")
-        print(f"Модель была сохранена: {model_dict.get('saved_at', 'время сохранения неизвестно')}")
-        
-        return self
-- 
2.34.1

